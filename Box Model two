# ------------------------------------------------------------------------------------------------------------------------------------------
# -----the box model, however, has an awkward limitation regarding box dimensions. This limitation is best illustrated with an example.
   e.g 
   <h1>Hello World</h1>
   h1 {
     border: 1px solid black;
     height: 200px;
     width: 300px;
     padding: 10px;
   }
   In the example above, a heading element’s box has solid, black, 1 pixel thick borders. 
   The height of the box is 200 pixels, while the width of the box is 300 pixels. A padding of 10 pixels has also been set on all four sides of the box’s content.
   Unfortunately, under the current box model, the border thickness and the padding will affect the dimensions of the box.
   The 10 pixels of padding increases the height of the box to 220 pixels and the width to 320 pixels. 
   Next, the 1-pixel thick border increases the height to 222 pixels and the width to 322 pixels.
   Under this box model, the border thickness and padding are added to the overall dimensions of the box. This makes it difficult to accurately size a box. 
   Over time, this can also make all of a web page’s content difficult to position and manage.
   
Why and How to solute this problem?

Answer: 
the box-sizing property controls the type of box model the browser should use when interpreting a web page.
The default value of this property is content-box. This is the same box model that is affected by border thickness and padding. 

Solution:
we can reset the entire box model and specify a new one: border-box.
e.g box-sizing: border-box;

In this box model, the height and width of the box will remain fixed. 
The border thickness and padding will be included inside of the box, which means the overall dimensions of the box do not change.


# ------------------------------------------------------------------------------------------------------------------------------------------
1. The default position of an element can be changed by setting its position property. 
   The position property can take one of four values:
   ·static - the default value (it does not need to be specified)
   ·relative
   ·absolute
   ·fixed
   
2.position：relative；
   One way to modify the default position of an element is by setting its position property to relative.
   This value allows you to position an element relative to its default static position on the web page
   
   The valid offset properties are:
   ·top - moves the element down.
   ·bottom - moves the element up.
   ·left - moves the element right.
   ·right - moves the element left.
   relative to default place.Move xxpx from the default static position.
   
   e.g :    the <div> will be moved down 20 pixels and to the right 50 pixels from its default static position. 
   .box-bottom {
     background-color: DeepSkyBlue;
     position: relative;
     top: 20px;
     left: 50px;
   }

3. position:absolute;
   When an element’s position is set to absolute all other elements on the page will ignore the element and act like it is not present on the page. 
   The element will be positioned relative to its closest positioned parent element.
   
   e.g : the .box-bottom <div> will be moved down and right from the top left corner of the view.
   .box-bottom {
     background-color: DeepSkyBlue;
     position: absolute;
     top: 20px;
     left: 50px;
   }
   When an element’s position is set to absolute,the element will scroll with the rest of the document when a user scrolls.

4. position: fixed;
   We can fix an element to a specific position on the page (regardless of user scrolling) by setting its position to fixed.
   e.g : the .box-bottom <div> will remain fixed to its position no matter where the user scrolls on the page,
   .box-bottom {
     background-color: DeepSkyBlue;
     position: fixed;
     top: 20px;
     left: 50px;
   }
 
5. z-index: xx(number);
   When boxes on a web page have a combination of different positions, the boxes (and therefore, their content) can overlap with each other, 
   making the content difficult to read or consume.
   
   The z-index property controls how far “back” or how far “forward” an element should appear on the web page when elements overlap. 
   This can be thought of the depth of elements, with deeper elements appearing behind shallower elements.
   The z-index property accepts integer values. 
   Depending on their values, the integers instruct the browser on the order in which elements should be displayed on the web page.
   The number larger, the turn more priority.
   
   
###  display: inline/block/inline-block;

6. display: inline;
   Inline elements have a box that wraps tightly around their content, only taking up the amount of space necessary to display their content and not requiring a new line after each element. 
   The CSS display property provides the ability to make any element an inline element. 
   This includes elements that are not inline by default such as paragraphs, divs, and headingsThe height and width of these elements cannot be specified in the CSS document.
   e.g :
   h1 {
     display: inline;
   }
   
   The CSS in the example above will change the display of all <h1> elements to inline. 
   The browser will render <h1> elements on the same line as other inline elements immediately before or after them (if there are any).
   
7. display： block；
   Some elements are not displayed in the same line as the content around them. These are called block-level elements. 
   These elements fill the entire width of the page by default, but their width property can also be set. 
   Unless otherwise specified, they are the height necessary to accommodate their content.
   Elements that are block-level by default include all levels of heading elements (<h1> through <h6>), <p>, <div> and <footer>. 
   e.g :
   strong {
     display: block;
   }
   all <strong> elements above will be displayed on their own line, with no content directly on either side of them even though their contents may not fill the width of most computer screens.
   
8. display: inline-block;
   Inline-block display combines features of both inline and block elements. 
   Inline-block elements can appear next to each other and we can specify their dimensions using the width and height properties. 
   Images are the best example of default inline-block elements.
   
   html:
   <div class="rectangle">
     <p>I’m a rectangle!</p>
   </div>
   <div class="rectangle">
     <p>So am I!</p>
   </div>
   <div class="rectangle">
     <p>Me three!</p>
   </div>
   
   css:
   .rectangle {
     display: inline-block;
     width: 200px;
     height: 300px;
   }
   In the example above, there are three rectangular divs that each contain a paragraph of text. 
   The .rectangle <div>s will all appear inline (provided there is enough space from left to right) with a width of 200 pixels and height of 300 pixels, 
   even though the text inside of them may not require 200 pixels by 300 pixels of space.

9. float: left/right;
   If you’re simply interested in moving an element as far left or as far right as possible on the page, you can use the float property.
   The float property can be set to one of two values:
      ·left - this value will move, or float, elements as far left as possible.
      ·right - this value will move elements as far right as possible.
   
   The float property can also be used to float multiple elements at once. 
   However, when multiple floated elements have different heights, it can affect their layout on the page. 
   Specifically, elements can “bump” into each other and not allow other elements to properly move to the left or right.

10. clear: left/right/both/none;
    The clear property specifies how elements should behave when they bump into each other on the page. It can take on one of the following values.
    
    ·left — the left side of the element will not touch any other element within the same containing element.
    ·right — the right side of the element will not touch any other element within the same containing element.
    ·both — neither side of the element will touch any other element within the same containing element.
    ·none — the element can touch either side.
   
# ------------------------------------------------------------------------------------------------------------------------------------------
example:
html code:
<!DOCTYPE html>
<html>
<head>
  <title>Please Participate in Our Survey!</title>
  <link href="https://fonts.googleapis.com/css?family=Oswald:300,700|Varela+Round" rel="stylesheet">
  <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>

  <header>
    <ul>
      <li>Question 1</li>
      <li>Question 2</li>
      <li>Question 3</li>
      <li>Question 4</li>
      <li>Question 5</li>
      <li>Question 6</li>
    </ul>
  </header>
  
  <div class="welcome">
    <h1><strong>Welcome</strong> to our survey!</h1>
    <p>We're looking forward to getting your answers so we can make sure our products and services are the best they can be!</p>
  </div>

  <div class="question">
    <h4>Question 1</h4>
    <h2>I like participating in physical activity such as running, swimming, or biking.</h2>

    <div class="answer">
      <h3>Disagree</h3>
    </div>

    <div class="answer">
      <h3>Neutral</h3>
    </div>

    <div class="answer">
      <h3>Agree</h3>
    </div>
  </div>

  <div class="question">
    <h4>Question 2</h4>
    <h2>I try to keep up to date with the latest fashion in active wear.</h2>

    <div class="answer">
      <h3>Disagree</h3>
    </div>

    <div class="answer">
      <h3>Neutral</h3>
    </div>

    <div class="answer">
      <h3>Agree</h3>
    </div>
  </div>

  <div class="question">
    <h4>Question 3</h4>
    <h2>I purchase clothing online regularly.</h2>

    <div class="answer">
      <h3>Disagree</h3>
    </div>

    <div class="answer">
      <h3>Neutral</h3>
    </div>

    <div class="answer">
      <h3>Agree</h3>
    </div>
  </div>

  <div class="question">
    <h4>Question 4</h4>
    <h2>I try to buy goods that are designed and/or manufactured in my home country.</h2>

    <div class="answer">
      <h3>Disagree</h3>
    </div>

    <div class="answer">
      <h3>Neutral</h3>
    </div>

    <div class="answer">
      <h3>Agree</h3>
    </div>
  </div>

  <div class="question">
    <h4>Question 5</h4>
    <h2>I look to famous athletes when trying to choose what to wear when training.</h2>

    <div class="answer">
      <h3>Disagree</h3>
    </div>

    <div class="answer">
      <h3>Neutral</h3>
    </div>

    <div class="answer">
      <h3>Agree</h3>
    </div>
  </div>

  <footer>
    <h3>
      Thanks for taking our survey！
    </h3> 
  </footer>  


</body>
</html>

css code:
body {
  background-color: #FFF;
  margin: 0 auto;
}

header {
  background-color: #466995;
  border-bottom: 1px solid #466995;
  position: fixed;
  width: 100%;
  z-index: 10;
}

footer {
  margin-top: 100px;
  height: 100px;
}
ul {
  margin: 30px auto;
  padding: 0 20px;
  text-align: center;
}

li {
  color: #FFF;
  font-family: 'Oswald', sans-serif;
  font-size: 16px;
  font-weight: 300;
  text-transform: uppercase;
  display:inline-block;
  width: 80px;
}

li:hover {
  color: #DBE9EE;
}

h1 {
  color: #466995;
  font-family: 'Oswald', sans-serif;
  font-size: 32px;
  font-weight: 300;
  text-transform: uppercase;
}

h2 {
  color: #333;
  font-family: 'Varela Round', sans-serif;
  font-size: 26px;
  font-weight: 100;
  margin: 0 auto 20px auto;
}

h3 {
  color: #466995;
  font-family: 'Oswald', sans-serif;
  font-size: 18px;
  text-align: center;
  font-weight: 700;
  text-transform: uppercase;
  padding: 30px;
}

h4 {
  color: #466995;
  font-family: 'Oswald', sans-serif;
  font-size: 18px;
  font-weight: 300;
  letter-spacing: 2px;
  text-align: center;
  text-transform: uppercase
}

p {
  color: #333;
  font-family: 'Varela Round', sans-serif;
  font-size: 18px;
}

footer {
  background-color: #DBE9EE;
  text-align: center;
}

.welcome {
  background-color: #DBE9EE;
  box-sizing: border-box;
  padding: 40px;
  text-align: center;
  width: 100%;
  position: relative;
  top: 50px;
}

.question {
  text-align: center;
  position: relative;
  top: 40px;
}

.answer {
  border: 1px solid #466995;
  margin: 20px;
  display: inline-block;
}

.answer:hover {
  background: #C0D6DF;
  color: #FFF;
}


end.
